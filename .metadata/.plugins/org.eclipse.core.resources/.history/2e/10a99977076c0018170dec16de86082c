package shutdownServer;

import java.awt.AWTException;
import java.awt.SystemTray;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.JFrame;

public class ServerControl {
	private ServerSocket myServer;
	private Socket clientSocket;
	private int serverPort = 16057;
	private String name = "";
	private String ip = "localhost";
	private NotifTray td = new NotifTray();
	public ServerControl() {
		
		InetAddress IP;
		try {
			IP = InetAddress.getLocalHost();
			ip = IP.getHostAddress();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		JFrame jf = new JFrame();
		jf.add(new panel(ip, serverPort));
		jf.setBounds(300, 300, 452, 232);
		jf.setVisible(true);
		openServer(serverPort);
		
		while (true) {
			getNameCute();
			listening();
		}
	}
	private void getNameCute()
	{
		File f = new File("name.txt");
		if(f.exists())
		{
			try {
				BufferedReader br = new BufferedReader(new FileReader("name.txt"));
				StringBuilder sb = new StringBuilder();
				String line = br.readLine();

			    while (line != null) {
			        sb.append(line);
			        sb.append(System.lineSeparator());
			        line = br.readLine();
			    }
			    this.name = sb.toString();
			    System.out.println("Name is"+this.name);
			    br.close();
			}catch(Exception ex)
			{
				ex.printStackTrace();
			}
		}
	}
	private void openServer(int portServer) {
		try {
			myServer = new ServerSocket(portServer);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void listening() {
		try {
			System.out.println("Server running");
			clientSocket = myServer.accept();
			ObjectInputStream ois = new ObjectInputStream(clientSocket.getInputStream());
			// ObjectOutputStream oos = new
			// ObjectOutputStream(clientSocket.getOutputStream());
			Object o = ois.readObject();
			if (o instanceof Command) {
				Command cmd = (Command) o;
				System.out.print("Receive mess>>_" + cmd.getMoTa());
				System.out.println();
				commmandComputer(cmd);
				// oos.writeObject("Đã nhận!");
			}
		} catch (Exception e) {
			try {
				td.displayTray("Error! Server is running, don't run again!", this.name);
			} catch (MalformedURLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (AWTException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.exit(0);
		}
	}

	private void commmandComputer(Command cmd) {
		if (SystemTray.isSupported()) {
			try {
				td.displayTray(cmd.getMoTa(), this.name);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		cmd(cmd.getCmd());
	}

	private void cmd(String cmd) {
		try {
			@SuppressWarnings("unused")
			Process p = Runtime.getRuntime().exec(cmd);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		new ServerControl();
		
	}

}
